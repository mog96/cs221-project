+------------------+
| PROPOSAL OUTLINE |
+------------------+
TASK DEFINITION
  - Draw a looping (complete circle) wavy line. Achieve balance between order and chaos that yields beauty as observed by a human

INFRASTRUCTURE
  - Processing in Python

APPROACH
  - Model as search problem
    - States are points in a grid (graph)
    - Decision of where next line segment should be drawn is based on some heuristic

  - Baseline: Create a line that touches all dots
  - Oracle: Create a line that touches all dots and forms a loop

LITERATURE REVIEW
  - Procedural graph generation (for creating wavy lines)

ERROR ANALYSIS
  - [ Design a few experiments to show the properties (both pros and cons) of your system. For example, if your system is supposed to deal with graphs with lots of cycles, then construct both examples with lots of cycles and ones without to test your hypothesis. ]


---------


+-----------------------+
| IDEAS FOR COMPOSITION |
+-----------------------+
PARAMETERS TO TUNE
  - Compose drawing into polygonal cells
    - Each is filled before moving on to an adjacent polygon
    - Polygons could be composed ahead of time or composed as line is drawn, with constraints on their size
      - Requirement perhaps is that at least two/three corners must touch corners of nearby polygons


+--------------+
| RELATED WORK |
+--------------+
Homework 3: Text Reconstruction (search algorithms)



+-------+
| NOTES |
+-------+
PERCY'S FEEDBACK 10/23:
  - This is a search problem
  - Constraints should be between filling the whole rectangle with the line and making an interesting pattern (which he supposes is at odds with trying to fill the whole rectangle)
  - Oracle is one of my drawings
  - Baseline is basic whole rectangle/basic interesting line that does not fill rectangle

WORK SESSION 12/4
  - The way I draw the line by hand is sort of like DFS -- I go deep and then back up and fill up all the newly delineated whitespace
  - But the coded implementation must use something more like UCS, because that will capture the semantics of the decisions made along the way as the line is drawn
  - The difference between what I'd like to do and how UCS works, however, is that the costs are slightly random (stochastic fantastic)
    - No two wavy line drawings are the same
    - So therefore, the costs of each step cannot be the same from run to run
  - This randomness will obviously have to be seeded for testing purposes
  - And it will need to be bounded
  - RANDOM COST IDEAS:
    - Bias toward a straight line
      - i.e., choose a next hop that will keep the line straight
      - I believe this might encourage the model to try to fill the whole page
