+------------------+
| PROPOSAL OUTLINE |
+------------------+
TASK DEFINITION
  - Draw a looping (complete circle) wavy line. Achieve balance between order and chaos that yields beauty as observed by a human

INFRASTRUCTURE
  - Processing in Python

APPROACH
  - Model as search problem
    - States are points in a grid (graph)
    - Decision of where next line segment should be drawn is based on some heuristic

  - Baseline: Create a line that touches all dots
  - Oracle: Create a line that touches all dots and forms a loop

LITERATURE REVIEW
  - Procedural graph generation (for creating wavy lines)

ERROR ANALYSIS
  - [ Design a few experiments to show the properties (both pros and cons) of your system. For example, if your system is supposed to deal with graphs with lots of cycles, then construct both examples with lots of cycles and ones without to test your hypothesis. ]


---------


+-----------------------+
| IDEAS FOR COMPOSITION |
+-----------------------+
PARAMETERS TO TUNE
  - Compose drawing into polygonal cells
    - Each is filled before moving on to an adjacent polygon
    - Polygons could be composed ahead of time or composed as line is drawn, with constraints on their size
      - Requirement perhaps is that at least two/three corners must touch corners of nearby polygons

COLOR SCHEME
  - White on black background


+--------------+
| RELATED WORK |
+--------------+
Homework 3: Text Reconstruction (search algorithms)



+-------+
| NOTES |
+-------+
PERCY'S FEEDBACK 10/23:
  - This is a search problem
  - Constraints should be between filling the whole rectangle with the line and making an interesting pattern (which he supposes is at odds with trying to fill the whole rectangle)
  - Oracle is one of my drawings
  - Baseline is basic whole rectangle/basic interesting line that does not fill rectangle

WORK SESSION 12/4
  - The way I draw the line by hand is sort of like DFS -- I go deep and then back up and fill up all the newly delineated whitespace
  - But the coded implementation must use something more like UCS, because that will capture the semantics of the decisions made along the way as the line is drawn
  - The difference between what I'd like to do and how UCS works, however, is that the costs are slightly random (stochastic fantastic)
    - No two wavy line drawings are the same
    - So therefore, the costs of each step cannot be the same from run to run
  - This randomness will obviously have to be seeded for testing purposes
  - And it will need to be bounded
  - RANDOM COST IDEAS:
    - LIVE:
      - Bias toward a straight line
        - i.e., choose a next hop that will keep the line straight
        - I believe this might encourage the model to try to fill the whole page
    - STATIC:
      - Assign random values ahead of time
      - Store in dictionary mapping each loc to each next loc
    - Hang on, I think assignments _have_ to be static for UCS
      - Or at least, this might make for the simplest implementation
  - Current concern is that we want to visualize the line being drawn in real time
    - (The dream is the process)
    - How about DFS-ID? Iterate to a certain level, and then reset..?
    - DFS-ID to a certain level, to determine a hop. Then DFS to a certain level from the nuw current loc, to determine the next hop. And repeat
      - Instead of randomness costs as in UCS, we have randomness of depth of DFS-ID
        - Could find a way to dial this to make larger curves at the outset, and then fill with smaller curves

WORK SESSION 12/6
  - Last work session I spoke with CA Steven Mussman about how he thought I could go about the problem
  - Steve seemed to think that the best way to generate the line is to have it wrap pack and forth around itself
    - So, start in, say, the middle of the page and go right or left, then turn around and go back along the way it just came, then turn around again
  - Steve's insight is key because it identies a core part of how I draw the line
    - I make it wrap back on itself
  - Steve suggested the search could be constrained by the current shape made by the line
    - So, for example, since the way he described the line being generated will likely result in a circle, but we want a square in order to fit the page, lower cost wold be assigned to an action that results in more of a square
  - Steve said that the state would be an entire 2-D array of points representing the current path
    - I'm thinking a non-None point in the grid represents a point visited, and each point contains the coordinates of the next point in the line
  - My concern still, however, is how to make this a search problem while still drawing the line in real time
    - I'm not sure this can be accomplished using the basic paradigm for implementing search prescribed in class
    - A hacky way to go about this would be to have a timer running that somehow grabs the current state
      - Not sure that's possible, though

WORK SESSION 12/9
  - I'm thinking I can update the display to reflect whatever current state is being examined in succAndCost()
    - So, it'll be jumpy, but it'll show the general progression of the search
  - Only thing left to figure out for this V1 implementation is _cost_
    - For now, we will just use a random number in the range [0, 1)
  - raise Exception("Not implemented yet")
  - Removed 'Grid is full' check from IsEnd(s). Checking surrounding points should be sufficient
    - I deally we will fill the whole grid, but this is a problem that will be solved by assigning better costs to actions
    - And as Percy said, the hardest part of this problem will be filling the whole page

  Wavy Line Search Problem V1
  ---------------------------
  Starting state s_start:   Width x height grid of 'None'; starting point; current direction of motion (clockwise/counterclockwise, initialized randomly)

  Actions(s):               Move clockwise or counterclockwise along adjacent line

  Cost(s, a):               Random number in the range [0.0, 1.0)

  Succ(s, a):               Grid updated with current point in state s pointing to current point in state s'

  IsEnd(s):                 All points surrounding current point have been visited
                            Development version will include a line length parameter in state, and this length will be checked against some maximum

  - Now to deal with deciding whether to go clockwise or counterclockwise. My thoughts are as follows:
    - At the outset, we flip a coin to decide whether to go clockwise or counterclockwise
      - To simplify this explanation, let's say we start out clockwise
    - Any step made that can be counted as clockwise is considered clockwise
      - So, when we take our first step, it is clockwise, even though there is not yet anything to be going clockwise around
      - When we run into a visited point, any step taken to get around it and continue moving clockwise is considered clockwise
    - To make the line interesting, there is some probability that we will begin moving counterclockwise
      - This means taking a step in a direction that does not make sense if we were simply moving in our original clockwise direction
      - Just updated state to include the current direction of motion (clockwise/counterclockwise)
  - Just spoke with CA Rickard Br√ºel Gabrielsson. He seemed to think the best search algorithm to use for this problem is DFS-ID (something I considered in my notes from 12/4), such that:
    - The search is done to some depth
    - A cost is assigned to each action, based on distance from the original starting point
    - The lowest cost valid path is chosen
  - An aside: I guess this would've been the value of actually picking a CA as my advisor -- I wouldn't have to update every new CA I talk to on what my problem is
    - Though it adds to the fun to reintroduce my project to new CAs -- they all think it's weird and interesting
    - And it doesn't take _that_ long to explain
  - So I'm going to bail on my formulation: Segregate actions from a given state into either clockwise or conterclockwise, and only return one type or the other
    - Rickard said that in the case of DFS-ID I can simply use forward, right, or left
  - I'm still unsure, though, where the probability will come in if I'm using DFS-ID
    - I suppose it should manifest in the cost of each action

WORK SESSION 12/13
  - DFS-ID implementation:
    - DFS to a depth limit
    - Track cost of each successful path (that reaches depth d)
    - Choose path with lowest cost
    - Draw this path
    - Advance current point to end of path
    - Repeat
  - If I want actions to be more descriptive in verbose mode (i.e. 'forward', 'left', 'right'), I need to save the previous point in my state as well
  - With DFS-ID I may need to store all search paths and pick the lowest cost path from them in the following order:
    - Reaches desired depth
    - Reaches furthest (not to desired depth)
  - So I guess my minimum cost path should be updated with any terminating path, if that path is greater in length than the current best, or if it is the same length, is lower in cost than the current best

WORK SESSION 12/14
  - Next steps for graphical display:
    - Implement updateDisplay()
    - Callable by search problem (whose calling function is called by search algorithm)
